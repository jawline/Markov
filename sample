Blake Loring
8 Clarence Lodge
Egham
TW20 0NW
blake_l@parsed.uk
Mobile No: +44 (0) 7817998942
Website: www.parsed.uk
Github: https://github.com/jawline
Education
2015 - Present Royal Holloway, University to London After a short gap in education, while working as a software engineer, I began
a PhD program. The program is joint between the Computer Science and Information Security departments. I am exploring the
relationship between language design and security, and how the relationship can be used to improve software analysis. In particular,
my work focuses on exploring the properties of JavaScript which make it difficult to analyze and whether alternative analysis
approaches be used to make JavaScript more reliable.
2011 - 2014 Royal Holloway, University of London I started studying Computer Science at Royal Holloway in 2011 and graduated
with a first class honours in July of 2014. My undergraduate work focused on compiler and language design and implementation.
2004 - 2011 Fortismere Secondary School I graduated from Fortismere secondary school in London in 2011 after completing A levels
in Economics, Maths, and Computing and received three further AS qualifications for History, Biology and OCR's extended project, for
which I created a operating system kernel.
Programming Languages I have extensive knowledge of the programming languages Rust, C, C++, Java and Javascript. This
experience comes as a result of extensive use in projects. I also have experience with many other programming languages such as
Haskell and Python.
Professional Experience
2014-2016: IG IG is the world-leading provider of contracts for difference (CFDs) and financial spread betting, and the UK's largest
forex provider.
I joined IG as a graduate developer in 2014. Over my first year there I worked in several teams across the company, taking on a variety
of different software development roles.
Working at IG has gave me key experience in developing large complex systems and working as a member of an agile development
team. It has also given me experience with frontend development and Javascript, areas of software engineering that I had not
previously explored.
I left IG after a year to return to begin a PhD programme.
2013-2014: Magna Carta Walks Application I was part of a team which developed a walking trails application for the Magna Carta
800 year anniversary, part of a collaboration between the National Trust and Royal Holloway.
This role involved working with a small team to produce a responsive web frontend and a complex editor. These applications were built
using modern web technologies including the AngularJS framework.
The server backend was implemented as a REST API using Node.js, this service handled all requests regarding walks and trails by the
frontend or editor. It also handled image and audio uploads, automatically compressing and making low resolution copies, allowing us
to reduce bandwidth requirements.
2012 - 2013: Holla@Me I developed the Android application for the Holla@Me social media service.
The project involved user interface design to a strict project brief, maintaining a responsive user interface whilst loading content from a
web server and interacting with the Holla@Me web service via a REST service.
During was required to collaborate with the other team members to maintain a consistent interface across all platforms on which the
service is offered. I also provided input during development which lead to an improved and more responsive user experience.
2011 Bach Track In the summer of 2011 I was hired by David Karlin of BachTrack to assist development of a PHP based content
management system. This involved both expanding the existing server side technology and improving the user interface.
2010-2014 Sport Concepts Setup and ongoing maintenance of a cloud solution including email, hosting and file management for a
leading sports architect based in central London.
Notable Projects (Links available on my website)
2015 ExpoSE
ExpoSE is a JavaScript symbolic execution engine built as a research tool to explore the effectiveness of symbolic execution
approaches in identifying issues in Node.js applications. ExpoSE uses program instrumentation to track alternative test cases found
throughout a test cases execution. The Z3 theorem prover is then used to generate a model for for each feasible alternative test case.
ExpoSE also includes a mechanism to extend the JavaScript type system and verify that complex type properties hold across the paths
explored.
2015 Z3Javascript
Z3Javascript is a complete JavaScript binding generator for the Z3 Microsoft theorem prover allowing it to be used in Node.js
applications (with basic support for emscripten based browser usage).
The project contains both a wrapper to the C bindings and a set of JavaScript wrapped classes (Expr, Model, Context) with which to
construct and test theorems.
2013 - 2014 Scribble
For my university third year project I designed and implemented a programming language and virtual machine.
The project gave me experience with parser and compiler design, as well an understanding of how virtual machines work. This
knowledge continues to be useful, even when developing applications in high level languages, as the sources of bugs, vulnerabilities
and performance issues are much easier to identify with an understanding of how statements are actually being executed.
The language and accompanying tools were written in C++, some of the supplied libraries were written in Scribble (such as math.sc).
2010-2014 Dawn Operating System
During sixth form I developed an x86 based operating system with a scheduler, virtual memory manager, application loader, standard
library with a set of system calls.
The project involved development of an operating system kernel and a set of utility programs. I also built some example user space
programs which allowed for basic input/output. The code was primarily written in C (C99), with assembly used in order to perform
certain low level operations or instructions which C does not directly expose (such as the register management required to swap
contexts or mapping virtual memory pages). I also created some utility scripts with bash which automate the compilation and
deployment of the OS onto either a disk image or physical drive.
The project gave me an understanding of how a operating system kernel functions, how computers manage memory and how features
of languages and computers I use everyday such as heap allocators and threading, video output and hard drive access are actually
implemented.
2012 Microsoft Student Application Development Competition
I was one of 20 participants who won the third application writing competition held in 2012. The aim of the competition was to produce
an application for Windows mobile devices and publish it on the Microsoft store. For the competition I produced and published two
applications on the windows store. These applications were written in C# and used the XNA framework.